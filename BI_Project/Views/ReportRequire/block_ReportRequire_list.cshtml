@using BI_Project.Services.Menus;
@using BI_Project.Models.EntityModels;
@using System.Text.RegularExpressions;
@using BI_Project.Helpers;
@using BI_Project.Services.ReportRequire;
@using System.Web.Mvc.Html;
@using BI_Project.Services.Roles;
@model BI_Project.Models.UI.BlockModel


@{
    BlockMenuListLangModel blockLang = (BlockMenuListLangModel)Model.LanguageModel;
    BlockDataRoleCreateModel blockData = (BlockDataRoleCreateModel)Model.DataModel;

    BI_Project.Services.User.BlockDataMenuLeftModel menuData = (BI_Project.Services.User.BlockDataMenuLeftModel)ViewData["block_menu_left_data"];
    IEnumerable<EntityMenuModel> menuDataUser = (IEnumerable<EntityMenuModel>)ViewData["MenuData"];

    var curUserIsSuperAdmin = (bool)Session["IsSuperAdmin"];
    List<EntityDepartmentModel> lstDepartments = (List<EntityDepartmentModel>)ViewData["departments"];
    List<EntityDepartmentModel> lstDepartmentsAdmin = (List<EntityDepartmentModel>)ViewData["listdepartmentsadmin"];
    //EntityMenuModel blockData = (EntityMenuModel)Model.DataModel;


    //int hidden = Model.Hidden;
    var currentOrgId = (int?)ViewData["CurrentOrgId"];

    List<ReportRequireModel> reportList = (List<ReportRequireModel>)ViewData["reportList"];



    List<EntityReportBIModel> lstReportBI = (List<EntityReportBIModel>)ViewData["reportbis"];
    string listReport = null;
    Dictionary<string, string> dicExtraClass = new Dictionary<string, string>();
    dicExtraClass["ul_class"] = "";

    List<EntityCycleModel> listcycle = (List<EntityCycleModel>)ViewData["listcycle"];
}

<style>
    .form-horizontal .radio, .form-horizontal .checkbox, .form-horizontal .radio-inline, .form-horizontal .checkbox-inline {
        padding-top: 0px;
    }

    span {
        white-space: pre;
    }
</style>

<div class="content">
    <div class="panel panel-flat">
        <div class="panel-body">
            <div class="row">
                <div class="col-lg-12">
                    <button class="btn btn-primary" onclick="AddNewReport(0)">Tạo yêu cầu xác nhận báo cáo</button>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-12">
                    <div class="panel-heading text-right" id="reportView">
                        @{Html.RenderPartial("_ListRequire", new ViewDataDictionary { { "reportList", reportList } });
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!--popup add/edit-->
<div class="modal" id="dlgAddRequire">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <a href="#" class="close" data-dismiss="modal">&times;</a>
            </div>
            <div class="modal-body">
                <fieldset id="submitForm">
                    <input type="hidden" id="RequireId" value="0" />

                    <div class="form-group">
                        <label for="Title">Yêu cầu báo cáo<span class="required" style="color: red;">*</span></label>
                        <input id="Title" name="Title" type="text" class="form-control" required />
                    </div>
                    <div class="form-group">
                        <label for="datepicker">Thời gian xác nhận<span class="required" style="color: red;">*</span></label>
                        <input id="datepicker" name="datepicker" type="text" data-date-format="dd/mm/yy" class="form-control" placeholder="ngày/tháng/năm" />
                    </div>
                    <div class="form-group">
                        <label for="Description">Mô tả</label>
                        <textarea id="Description" class="form-control" rows="3" style="resize: none;"></textarea>
                    </div>
                    <div class="form-group">
                        <label for="Name">Chu kỳ <span class="required" style="color: red;">*</span></label>
                        <select class="select select2-hidden-accessible" id="Cycle" name="Cycle" data-live-search="true" required>
                            @foreach (EntityCycleModel cycle in listcycle)
                            {                                
                                    <option value="@cycle.Id" class="" selected>@Html.Raw(cycle.Name)</option>                             
                            }
                        </select>
                    </div>
                    <div class="form-group">
                        <input type="hidden" name="StrAllowedReportBI" id="StrAllowedReportBI" value="@listReport" />

                        <a href="#" id="checkButton" class="k-button">Chọn tất cả</a>&nbsp;&nbsp;&nbsp;<a href="#" id="uncheckButton" class="k-button">Bỏ chọn tất cả</a>
                        <div class="tree-checkbox-hierarchical well border-left-danger border-left-lg" id="treeReportBI">
                            <ul></ul>
                        </div>
                    </div>

                    <div class="form-group">
                        <button type="submit" class="btn btn-primary" id="btnSave"> Lưu </button>
                        <button type="submit" class="btn btn-primary" id="btnSend"> Gửi </button>
                        <button type="submit" class="btn btn-primary" id="btnClose"> Hoàn thành </button>
                    </div>
                </fieldset>
            </div>
        </div>
    </div>
</div>

<!--popup confirm delete-->
<div class="modal fade" id="DeleteConfirmation">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <a href="#" class="close" data-dismiss="modal">&times;</a>
                <h4>Xóa yêu cầu báo cáo</h4>
            </div>
            <div class="modal-body">
                <h4>
                    Bạn có chắc chắn muốn xóa <label id="lblTitle"></label>?
                </h4>
            </div>
            <div class="modal-footer">
                <a href="#" class="btn btn-primary" data-dismiss="modal" id="r">Cancel</a>
                <a href="#" class="btn btn-danger" onclick="ConfirmDelete()">Confirm</a>
            </div>
        </div>
    </div>
</div>


<script>

    // popup cửa sổ thêm mới yêu cầu báo cáo
    function AddNewReport() {
        $("#Status").val(0);
        $("#RequireId").val(0);
        $("#Title").val('');
        $("#Cycle").val('YEAR');
        $("#StrAllowedReportBI").val(''); 
        $("#dlgAddRequire").modal();

        // load lại cây báo cáo với những báo cáo đã được chọn theo RequireId
        $('#treeReportBI').fancytree({
            checkbox: true,
            selectMode: 3,
            source: {
                url: '/ReportRequire/ReportList?RequireId=null',
                cache: false
            },
            select: function (evt, data) {
                getSelectedReportBINodes();
            },
            init: function () {
                getSelectedReportBINodes();
            },
            loadError: function (e, data) {
                data.message = "Danh sách trống!";
            },
            filter: {
                mode: "show",
                autoApply: true
            }
        });

        function getSelectedNodes() {
            selectedNodes = $("#readdyTree").fancytree("getTree").getSelectedNodes();
            selectedArr = selectedNodes.map(x => x.key);
            selectedNodes.forEach(e => {
                var p = e.parent;
                while (p.parent != null) {
                    if (selectedArr.indexOf(p.key) == -1) selectedArr.push(p.key);
                    p = p.parent;
                }
            });

            $('#StrAllowedMenus').val(selectedArr.toString());
        }

        function getSelectedReportBINodes() {
            selectedNodes = $("#treeReportBI").fancytree("getTree").getSelectedNodes();
            selectedArr = selectedNodes.map(x => x.key);
            selectedNodes.forEach(e => {
                var p = e.parent;
                while (p.parent != null) {
                    if (selectedArr.indexOf(p.key) == -1 && p.key > 0) selectedArr.push(p.key);
                    p = p.parent;
                }
            });

            $('#StrAllowedReportBI').val(selectedArr.toString());
            console.log(selectedArr.toString());
        }
    };

    // popup cửa sổ sửa yêu cầu báo cáo
    function EditReport(reportId, status) {
        var url = "/ReportRequire/GetReportById?reportId=" + reportId;
        $("#dlgAddRequire").modal();

        $.ajax({
            type: "GET",
            url: url,
            success: function (data) {
                var obj = JSON.parse(data);
                var arrDMY = obj.ConfirmExpired.substring(0, 10).split("-");
                var dateDDMMYYYY = arrDMY[2] + '/' + arrDMY[1] + '/' + arrDMY[0];

                if (obj.Cycle == "WEEKLY") {
                    var titleCycle = "WEEKLY";
                }
                else if (obj.Cycle == "MONTH") {
                    var titleCycle = "MONTH";
                }
                else if (obj.Cycle == "QUARTER") {
                    var titleCycle = "QUARTER";
                }
                else if (obj.Cycle == "YEAR") {
                    var titleCycle = "YEAR";
                }
                else {
                    var titleCycle = "YEAR";
                }

                $("#RequireId").val(obj.Id);
                $("#Title").val(obj.Title);
                $("#datepicker").datepicker({ dateFormat: "dd-mm-yy" }).val(dateDDMMYYYY);
                $("#Description").val(obj.Description);
                $("#StrAllowedReportBI").val(obj.strReportId);
                $("#Status").val(obj.Title);
                $("#Cycle").val(titleCycle);

                //disable button for dialog
                if (status == 0) {
                    $("#btnSave").prop("disabled", false)
                    $("#btnSend").prop("disabled", false)
                    $("#btnClose").prop("disabled", true)
                } else if (status == 1) {
                    $("#btnSave").prop("disabled", true)
                    $("#btnSend").prop("disabled", false)
                    $("#btnClose").prop("disabled", false)
                } else {
                    $("#btnSave").prop("disabled", true)
                    $("#btnSend").prop("disabled", true)
                    $("#btnClose").prop("disabled", true)
                }
            }
        })

        // load lại cây báo cáo với những báo cáo đã được chọn theo RequireId
        $('#treeReportBI').fancytree({
            checkbox: true,
            selectMode: 3,
            source: {
                url: '/ReportRequire/ReportList?RequireId=' + reportId,
                cache: false
            },
            select: function (evt, data) {
                getSelectedReportBINodes();
            },
            init: function () {
                getSelectedReportBINodes();
            },
            loadError: function (e, data) {
                data.message = "Danh sách trống!";
            },
            filter: {
                mode: "show",
                autoApply: true
            }
        });

        function getSelectedNodes() {
            selectedNodes = $("#readdyTree").fancytree("getTree").getSelectedNodes();
            selectedArr = selectedNodes.map(x => x.key);
            selectedNodes.forEach(e => {
                var p = e.parent;
                while (p.parent != null) {
                    if (selectedArr.indexOf(p.key) == -1) selectedArr.push(p.key);
                    p = p.parent;
                }
            });

            $('#StrAllowedMenus').val(selectedArr.toString());
        }

        function getSelectedReportBINodes() {
            selectedNodes = $("#treeReportBI").fancytree("getTree").getSelectedNodes();
            selectedArr = selectedNodes.map(x => x.key);
            selectedNodes.forEach(e => {
                var p = e.parent;
                while (p.parent != null) {
                    if (selectedArr.indexOf(p.key) == -1 && p.key > 0) selectedArr.push(p.key);
                    p = p.parent;
                }
            });

            $('#StrAllowedReportBI').val(selectedArr.toString());
            console.log(selectedArr.toString());
        }
    }

    $("#checkButton").click(function () {
        $("#treeReportBI").fancytree("getTree").visit(function(node){
				node.setSelected(true);
			});
			return false;
    });

    $("#uncheckButton").click(function () {
        $("#treeReportBI").fancytree("getTree").visit(function (node) {
            node.setSelected(false);
        });
        return false;
    });
    
    function toggleCheckAll() {       
        var checkButtonValue = $("#checkButton").val();

        if (checkButtonValue == "Bỏ chọn") {
            $("#treeReportBI").jstree(true).check_all();
            $("#checkButton").val("Chọn hết");
        } else {
            $("#treeReportBI").jstree(true).uncheck_all();
            $("#checkButton").val("Bỏ chọn");
        }
    }

    $(document).ready(function () {
        $("#form").validate({
            rules: {
                "Title": { required: true },
                "datepicker": { required: true }
            },
            messages: {
                "Title": { required: "<span class='required' style='color: red;'>Đề nghị nhập tên yêu cầu</span>" },
                "datepicker": { required: "<span class='required' style='color: red;'>Đề nghị nhập ngày xác nhận</span>" }
            }
        });


        $('#treeReportBI').fancytree({
            checkbox: true,
            selectMode: 3,
            source: {
                url: '/ReportRequire/ReportList?RequireId=0',
                cache: false
            },
            select: function (evt, data) {
                getSelectedReportBINodes();
            },
            init: function () {
                getSelectedReportBINodes();
            },
            loadError: function (e, data) {
                data.message = "Danh sách trống!";
            },
            filter: {
                mode: "show",
                autoApply: true
            }
        });

        function getSelectedNodes() {
            selectedNodes = $("#readdyTree").fancytree("getTree").getSelectedNodes();
            selectedArr = selectedNodes.map(x => x.key);
            selectedNodes.forEach(e => {
                var p = e.parent;
                while (p.parent != null) {
                    if (selectedArr.indexOf(p.key) == -1) selectedArr.push(p.key);
                    p = p.parent;
                }
            });

            $('#StrAllowedMenus').val(selectedArr.toString());
        }

        function getSelectedReportBINodes() {
            selectedNodes = $("#treeReportBI").fancytree("getTree").getSelectedNodes();
            selectedArr = selectedNodes.map(x => x.key);
            selectedNodes.forEach(e => {
                var p = e.parent;
                while (p.parent != null) {
                    if (selectedArr.indexOf(p.key) == -1 && p.key > 0) selectedArr.push(p.key);
                    p = p.parent;
                }
            });

            $('#StrAllowedReportBI').val(selectedArr.toString());
            console.log(selectedArr.toString());
        }


    });

    // user click vào nút 'Lưu' trên popup Add/edit
    $("#btnSave").click(function () {
        var data1 = $("#submitForm").serialize();
        debugger;
        var id = document.getElementById("RequireId").value;
        var title = document.getElementById("Title").value;
        var confirmExpired = document.getElementById("datepicker").value;
        var description = document.getElementById("Description").value;
        var Cycle = document.getElementById("Cycle").value;
        var dataform = { 'Id': id, 'Title': title, 'ConfirmExpired': confirmExpired, 'Description': description, 'Status': 0, 'Cycle': Cycle , 'strReportId': $("#StrAllowedReportBI").val() };
        console.log(dataform);
        if (title == '') {
            return;
        }

        if (confirmExpired == '') {
            return;
        }

        if (Cycle == '') {
            Cycle = "YEAR";
        }

        $.ajax({
            type: "POST",
            url: "/ReportRequire/Save2",
            contentType: "application/json; charset=utf-8",
            data: JSON.stringify(dataform),
            datatype: "html",
            success: function (result) {
                $("#dlgAddRequire").modal('hide');
                $("#reportView").html(result);
            },
            error: function (er) {
                alert("Có lỗi xảy ra.");
                console.log(er);
            }
        })
    })

    // user click vào nút 'Gửi' trên popup Add/edit
    $("#btnSend").click(function () {
        var data1 = $("#submitForm").serialize();
        debugger;
        var id = document.getElementById("RequireId").value;
        var title = document.getElementById("Title").value;
        var confirmExpired = document.getElementById("datepicker").value;
        var description = document.getElementById("Description").value;
        var status = 1;
        var Cycle = document.getElementById("Cycle").value;
        var dataform = {
            'Id': id,
            'Title': title,
            'ConfirmExpired': confirmExpired,
            'Description': description,
            'Status': 1,
            'Cycle': Cycle,
            'strReportId': $("#StrAllowedReportBI").val()
        };
        console.log(dataform);
        if (title == '') {
            return;
        }

        if (confirmExpired == '') {
            return;
        }

        $.ajax({
            type: "POST",
            url: "/ReportRequire/Save2",
            contentType: "application/json; charset=utf-8",
            data: JSON.stringify(dataform),
            datatype: "html",
            success: function (result) {
                $("#dlgAddRequire").modal('hide');
                $("#reportView").html(result);
            },
            error: function (er) {
                alert("Có lỗi xảy ra.");
                console.log(er);
            }
        })
    })

    // user click vào nút 'Đóng' trên popup Add/edit
    $("#btnClose").click(function () {
        var data1 = $("#submitForm").serialize();
        debugger;
        var id = document.getElementById("RequireId").value;
        var title = document.getElementById("Title").value;
        var confirmExpired = document.getElementById("datepicker").value;
        var description = document.getElementById("Description").value;
        var Cycle = document.getElementById("Cycle").value;
        var dataform = { 'Id': id, 'Title': title, 'ConfirmExpired': confirmExpired, 'Description': description, 'Status': 2, 'Cycle': Cycle, 'strReportId': $("#StrAllowedReportBI").val() };
        console.log(dataform);
        if (title == '') {
            return;
        }

        if (confirmExpired == '') {
            return;
        }

        $.ajax({
            type: "POST",
            url: "/ReportRequire/Save2",
            contentType: "application/json; charset=utf-8",
            data: JSON.stringify(dataform),
            datatype: "html",
            success: function (result) {
                $("#dlgAddRequire").modal('hide');
                $("#reportView").html(result);
            },
            error: function (er) {
                alert("Có lỗi xảy ra.");
                console.log(er);
            }
        })
    })

    //Show The Popup Modal For DeleteComfirmation
    function DeleteReport(reportId, title) {
        $("#RequireId").val(reportId);
        document.getElementById('lblTitle').innerHTML = title;

        $("#DeleteConfirmation").modal("show");
    }

    var ConfirmDelete = function () {
        var id = $("#RequireId").val();
        $.ajax({
            type: "POST",
            url: "/ReportRequire/Delete?reportId=" + id,
            success: function (result) {
                $("#DeleteConfirmation").modal("hide");
                location.reload();
            }
        })
    }

    $(function () {
        $("#datepicker").datepicker({ dateFormat: "dd/mm/yy" }).val()
    });


</script>